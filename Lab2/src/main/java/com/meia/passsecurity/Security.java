/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.meia.passsecurity;

import java.io.*;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author asgas
 */
public class Security extends javax.swing.JFrame {

    /**
     * Creates new form Security
     */
    public Security() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RegisterBtn = new javax.swing.JButton();
        PassField = new javax.swing.JTextField();
        SecurityLbl = new javax.swing.JLabel();
        ExitBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        RegisterBtn.setText("Registrarse");
        RegisterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterBtnActionPerformed(evt);
            }
        });

        SecurityLbl.setText("Seguridad: ");

        ExitBtn.setBackground(new java.awt.Color(255, 153, 153));
        ExitBtn.setText("Salir");
        ExitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PassField, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(RegisterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(SecurityLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(72, 72, 72))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ExitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegisterBtn)
                    .addComponent(PassField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SecurityLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(ExitBtn)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public String[] getScores(String error) {
        File file = new File("C:\\Users\\asgas\\Desktop\\puntuacion.txt");
        String[] scores = new String[8];
        
        if (file.exists()) {
            FileReader reader;
            
            try {
                reader = new FileReader(file);
                BufferedReader bReader = new BufferedReader(reader);
                
                try {
                    for (int i = 0; i < 8; i++) {
                        scores[i] = bReader.readLine();
                    }
                    
                    reader.close();
                    bReader.close();
                    return scores;
                }
                catch (IOException ex) {
                    error = ex.getMessage();
                    error = "Error al leer el archivo.";
                }
            }
            catch (FileNotFoundException ex) {
                error = ex.getMessage();
            }
        }
        else {
            error = "No se encontró el archivo.";
        }
        
        return null;
    }
    
    public String[] getResults(String error) {
        File file = new File("C:\\Users\\asgas\\Desktop\\resultado.txt");
        String[] results = new String[4];
        
        if (file.exists()) {
            FileReader reader;
            
            try {
                reader = new FileReader(file);
                BufferedReader bReader = new BufferedReader(reader);
                
                try {
                    for (int i = 0; i < 4; i++) {
                        results[i] = bReader.readLine();
                    }
                    
                    reader.close();
                    bReader.close();
                    return results;
                }
                catch (IOException ex) {
                    error = ex.getMessage();
                }
            }
            catch (FileNotFoundException ex) {
                error = ex.getMessage();
            }
        }
        else {
            error = "No se encontró el archivo.";
        }
        
        return null;
    }
       
    private void RegisterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterBtnActionPerformed
        SecurityLbl.setText("Seguridad: ");
        
        if (!"".equals(PassField.getText())) {
            String errorMsg = "";
            String[] scores = getScores(errorMsg);
            String[] results = getResults(errorMsg);
            
            if (scores != null) {
                if (PassField.getText().length() < Integer.parseInt(scores[0])) {
                    SecurityLbl.setText("La contraseña debe tener mínimo " + scores[0] + " caracteres.");
                } else {
                    int score = 0, uppercaseLetters = 0, letters = 0, numbers = 0, symbols = 0;
                    String securityMsg = "";
                    
                    for (int i = 0; i < PassField.getText().length(); i++) {
                        if (Character.isUpperCase(PassField.getText().charAt(i))) {
                            uppercaseLetters++;
                            letters++;
                        } else if (Character.isLetter(PassField.getText().charAt(i))) {
                            letters++;
                        } else if (Character.isDigit(PassField.getText().charAt(i))) {
                            numbers++;
                        } else {
                            symbols++;
                        }
                    }
                    
                    score += Integer.parseInt(scores[1]) * PassField.getText().length(); //Total de caracteres
                    score += Integer.parseInt(scores[2]) * uppercaseLetters; //Letras mayúsculas
                    score += Integer.parseInt(scores[3]) + letters; //Total de letras
                    score += Integer.parseInt(scores[4]) + numbers; //Total de números
                    score += (Integer.parseInt(scores[5]) + PassField.getText().length()) * symbols; //Total de símbolos
                    
                    if (letters == PassField.getText().length()) {
                        score -= Integer.parseInt(scores[6]);
                    }
                    
                    if (numbers == PassField.getText().length()) {
                        score -= Integer.parseInt(scores[7]);
                    }
                    
                    for (int i = 0; i < results.length; i++) {
                        String[] range = results[i].split(",");
                        //System.out.println(range[0]);
                        //System.out.println(Integer.parseInt(range[0]) >= score && Integer.parseInt(range[1]) <= score);
                        if (Integer.parseInt(range[0]) <= score && Integer.parseInt(range[1]) >= score) {
                            if (i == 0) {
                                securityMsg = "contraseña insegura.";
                            } else if (i == 1) {
                                securityMsg = "contraseña poco segura.";
                            } else if (i == 2) {
                                securityMsg = "contraseña segura.";
                            } else {
                                securityMsg = "contraseña muy segura.";
                            }
                        }
                    }
                    //System.out.println(securityMsg);
                    SecurityLbl.setText(SecurityLbl.getText() + securityMsg);
                }
            } else {
                SecurityLbl.setText(errorMsg);
            }
        } else {
            SecurityLbl.setText("Debe ingresar una contraseña.");
        }
    }//GEN-LAST:event_RegisterBtnActionPerformed

    private void ExitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitBtnActionPerformed
        if (JOptionPane.showConfirmDialog(null, "¿Está seguro de que desea salir?", "¿Salir?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_ExitBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Security.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Security.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Security.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Security.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Security().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExitBtn;
    private javax.swing.JTextField PassField;
    private javax.swing.JButton RegisterBtn;
    private javax.swing.JLabel SecurityLbl;
    // End of variables declaration//GEN-END:variables
}
